
AVRASM ver. 2.1.52  c:\users\jay\documents\atmel studio\6.1\AVM4\AVM4\AVM4.asm Fri Nov 14 01:19:35 2014

c:\users\jay\documents\atmel studio\6.1\AVM4\AVM4\AVM4.asm(39): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.39.1005\avrassembler\Include\m16adef.inc'
c:\users\jay\documents\atmel studio\6.1\AVM4\AVM4\AVM4.asm(40): Including file 'c:\users\jay\documents\atmel studio\6.1\AVM4\AVM4\lcd_dog_asm_driver_m16A.inc'
c:\users\jay\documents\atmel studio\6.1\AVM4\AVM4\AVM4.asm(41): Including file 'c:\users\jay\documents\atmel studio\6.1\AVM4\AVM4\audio_playback_WTV20SD_beta.inc'
                 
                 
                  * evm1c.asm
                  *
                  *  Created: 11/6/2014 2:11:23 PM
                  *   Author: Suphasith Usdonvudhikai and Brandon Conklin
                  */ 
                  ;This program is modification of "evm1a"
                  ;
                  ;This program will read incoming voltage values and display onto the
                  ;LCD display.
                  ;
                  ;Voltmeter will use a range of 0-4V; target voltage range of 0.25-4V.
                  ;Vref will be 4.096V from external REF198.
                  ;This applies 1 mV accuracy.
                  ;
                  ;External ADC (MAX144) used as opposed to internal
                  ;
                  ;MAX144 and LCD both SPI
                  ;Require controlling which is being used when
                  ;
                  ;MAX144 outputs 12-bit data. High 8 read in first, followed by low 8
                  ;first 4 bits of high byte are "garbage"
                  ;
                  ;No multiplying or dividing subroutines needed like in previous lab
                  ;due to MAX144 outputting full voltage level.
                  ;
                  ;SCK and oscillator frequency prescaled by 16.
                  ;
                  ;New SPI registers will be utilized
                  ;
                  ;"Capture" Mode will be utilied to save voltage value on screen; replaces
                  ;"HOLD" Mode.
                  ;
                  ;Buzzer will also be utilized.
                 
                 
000000 c0ca      rjmp RESET
                 .list
                 
                 RESET:
0000cb e004      	ldi r16, High(RAMEND)		;stack pointer setup
0000cc bf0e      	out SPH, r16
0000cd e50f      	ldi r16, Low(RAMEND)
0000ce bf0d      	out SPL, r16
                 
0000cf ef0f      	ldi r16, $FF				;initialize PORTB
0000d0 bb07      	out DDRB, r16				;as outputs (LCD Display)
0000d1 bb0a      	out DDRA, r16				;buzzer
                 
0000d2 9ac0      	sbi PORTB, 0				;turnoff MAX144
                 
0000d3 df60      	rcall init_lcd_dog			;initialize the LCD display (1x)
0000d4 d03b      	rcall clr_dsp_buffs			;clear buff values (1x)
0000d5 d042      	rcall default_buff			;set up buffer for display
0000d6 df7b      	rcall update_lcd_dog		;display buffers onto lcd
                 
                 main:
0000d7 d009      	rcall read_voltage			;uses SPI protocol to read in voltages
0000d8 d07c      	rcall bin2BCD16				;convert
0000d9 d094      	rcall unpack_bcd_to_ascii	;convert to ascii
                 
                 display:
0000da ef0f      	ldi r16, $FF				;setup portB 
0000db bb08      	out PORTB, r16				;as outputs
                 	;cbi PORTB, 4				;CLR PB4 to enable LCD Connection {DO WE NEED THIS?}
0000dc e0f2      	ldi ZH, HIGH(line4_message<<1)
0000dd e7ea      	ldi ZL, LOW(line4_message<<1)
0000de d067      	rcall load_msg
0000df df72      	rcall update_lcd_dog		;output to display
0000e0 cff6      	rjmp main					;repeat
                 
                 
                 ;********************************************************************
                 ;NAME:      read_voltge
                 ;FUNCTION:  reads a 12-bit voltage value from MAX144
                 ;ASSUMES:   nothing
                 ;RETURNS:   R19:R18
                 ;MODIFIES:  R19,R18,R16
                 ;CALLS:     nothing
                 ;CALLED BY: main application 
                 ;********************************************************************
                 read_voltage: 
0000e1 e801      	ldi r16, (1<<7)|(1<<0)
0000e2 bb17      	out DDRB, r17 
0000e3 e502      	ldi r16, (1<<SPE)|(1<<MSTR)|(1<<SPR1)	;enable SPI, Master, and  fck/64
0000e4 b90d      	out SPCR, r16
                 
0000e5 98c0      	cbi PORTB, 0				;CLR PB0 to turn on CS for MAX144
                 
                 start_high:
0000e6 ef0f      	ldi r16, $FF				;garbage value 
0000e7 b90f      	out SPDR, r16				;load garbage value to start transmission
                 
                 high_byte:
0000e8 9b77      	sbis SPSR, SPIF				;poll until first byte is read
0000e9 cffe      	rjmp high_byte				;
0000ea b13f      	in r19, SPDR				;load high byte
0000eb 703f      	andi r19, $0F				;mask bit
                 
                 start_low:
0000ec ef0f      	ldi r16, $FF				;garbage value
0000ed b90f      	out SPDR, r16				;start second transmission
                 	
                 low_byte:
0000ee 9b77      	sbis SPSR,SPIF				;poll until low byte is read
0000ef cffe      	rjmp low_byte				;
0000f0 b12f      	in r18, SPDR				;load low_byte
0000f1 9ac0      	sbi PORTB, 0				;turn off MAX144
                 
                 compare_high:
0000f2 3030      	cpi r19, $00				;compare to 0
0000f3 f791      	brne start_high				;if not then system cannot capture
                 
                 compare_low:
0000f4 3020      	cpi r18, $00				;compare to 0
0000f5 f781      	brne start_high				;if not then system cannot capture
                 
                 /***********************Capture Mode******************************/
                 capture:
0000f6 ef0f      	ldi r16, $FF
0000f7 b90f      	out SPDR, r16
                 
                 high_byte1:
0000f8 9b77      	sbis SPSR, SPIF
0000f9 cffe      	rjmp high_byte1
0000fa b13f      	in r19, SPDR
0000fb 703f      	andi r19, $0F
                 
0000fc ef0f      	ldi r16, $FF
0000fd b90f      	out SPDR, r16
                 
                 low_byte1:
0000fe 9b77      	sbis SPSR, SPIF
0000ff cffe      	rjmp low_byte1
000100 b12f      	in r18, SPDR
                 
                 compare_high1:
000101 3030      	cpi r19, $00
000102 f411      	brne end
                 
                 compare_low1:
000103 3020      	cpi r18, $00
000104 f389      	breq capture
                 
                 end:
000105 9ac0      	sbi PORTB, 0				;turn off MAX144
000106 ef0f      	ldi r16, $FF
000107 bb08      	out PORTB, r16
000108 98c4      	cbi PORTB, 4
000109 e0f2      	ldi ZH, HIGH(line3_message<<1)
00010a e6e8      	ldi ZL, LOW(line3_message<<1)
00010b d03a      	rcall load_msg
00010c d096      	rcall tone_5V
00010d df44      	rcall update_lcd_dog
00010e d088      	rcall delay
00010f 9508      	ret
                  
                 ;********************************************************************
                 ;NAME:      clr_dsp_buffs
                 ;FUNCTION:  Initializes dsp_buffers 1, 2, and 3 with blanks (0x20)
                 ;ASSUMES:   Three CONTIGUOUS 16-byte dram based buffers named
                 ;           dsp_buff_1, dsp_buff_2, dsp_buff_3.
                 ;RETURNS:   nothing.
                 ;MODIFIES:  r25,r26, Z-ptr
                 ;CALLS:     none
                 ;CALLED BY: main application and diagnostics
                 ;********************************************************************
                 clr_dsp_buffs:
000110 e390           ldi R25, 48               ; load total length of both buffer.
000111 e2a0           ldi R26, ' '              ; load blank/space into R26.
000112 e0f0           ldi ZH, high (dsp_buff_1) ; Load ZH and ZL as a pointer to 1st
000113 e6e0           ldi ZL, low (dsp_buff_1)  ; byte of buffer for line 1.
                    
                     ;set DDRAM address to 1st position of first line.
                 store_bytes:
000114 93a1           st  Z+, R26       ; store ' ' into 1st/next buffer byte and
                                        ; auto inc ptr to next location.
000115 959a           dec  R25          ; 
000116 f7e9           brne store_bytes  ; cont until r25=0, all bytes written.
000117 9508           ret
                 
                 ;********************************************************************
                 ;NAME:			default_buff
                 ;FUNCTION:		initializes all three lines in buff
                 ;ASSUMES:		BYTE has been allocated in SRAM
                 ;RETURNS:		nothing
                 ;MODIFIES:		SRAM
                 ;CALLS:			load_msg
                 ;CALLED BY:		reset
                 ;********************************************************************
                 
                 default_buff:
000118 e0f2      		ldi ZH, HIGH(line1_message<<1)
000119 e4e4      		ldi ZL, LOW(line1_message<<1)
00011a d02b      		rcall load_msg
00011b e0f2      		ldi ZH, HIGH(line2_message<<1)
00011c e5e6      		ldi ZL, LOW(line2_message<<1)
00011d d028      		rcall load_msg
00011e e0f2      		ldi ZH, HIGH(line4_message<<1)
00011f e7ea      		ldi ZL, LOW(line4_message<<1)
000120 d025      		rcall load_msg
000121 9508      		ret										
                 
000122 2001
000123 2020
000124 2e20
000125 2020
000126 2020
000127 4456
000128 2043
000129 2020
00012a 0020      line1_message: .db 1, "    .    VDC    ", 0	 ;string 1
00012b 2d02
00012c 2d2d
00012d 2d2d
00012e 2d2d
00012f 2d2d
000130 2d2d
000131 2d2d
000132 2d2d
000133 002d      line2_message: .db 2, "----------------", 0	 ;string 2
000134 4303
000135 5041
000136 5554
000137 4552
000138 2044
000139 2020
00013a 7665
00013b 316d
00013c 0063      line3_message: .db 3, "CAPTURED   evm1c", 0  ;string 3
00013d 5703
00013e 4941
00013f 4954
000140 474e
000141 2020
000142 2020
000143 7665
000144 316d
000145 0063      line4_message: .db 3, "WAITING    evm1c", 0  ;string 4
                 
                 
                 ;*******************************************************************
                 ;NAME:      load_msg
                 ;FUNCTION:  Loads a predefined string msg into a specified diplay
                 ;           buffer.
                 ;ASSUMES:   Z = offset of message to be loaded. Msg format is 
                 ;           defined below.
                 ;RETURNS:   nothing.
                 ;MODIFIES:  r16, Y, Z
                 ;CALLS:     nothing
                 ;CALLED BY:  
                 ;********************************************************************
                 ; Message structure:
                 ;   label:  .db <buff num>, <text string/message>, <end of string>
                 ;
                 ; Message examples (also see Messages at the end of this file/module):
                 ;   msg_1: .db 1,"First Message ", 0   ; loads msg into buff 1, eom=0
                 ;   msg_2: .db 1,"Another message ", 0 ; loads msg into buff 1, eom=0
                 ;
                 ; Notes: 
                 ;   a) The 1st number indicates which buffer to load (either 1, 2, or 3).
                 ;   b) The last number (zero) is an 'end of string' indicator.
                 ;   c) Y = ptr to disp_buffer
                 ;      Z = ptr to message (passed to subroutine)
                 ;********************************************************************
                 load_msg:
000146 e0d0           ldi YH, high (dsp_buff_1) ; Load YH and YL as a pointer to 1st
000147 e6c0           ldi YL, low (dsp_buff_1)  ; byte of dsp_buff_1 (Note - assuming 
                                                ; (dsp_buff_1 for now).
000148 9105           lpm R16, Z+               ; get dsply buff number (1st byte of msg).
000149 3001           cpi r16, 1                ; if equal to '1', ptr already setup.
00014a f021           breq get_msg_byte         ; jump and start message load.
00014b 9660           adiw YH:YL, 16            ; else set ptr to dsp buff 2.
00014c 3002           cpi r16, 2                ; if equal to '2', ptr now setup.
00014d f009           breq get_msg_byte         ; jump and start message load.
00014e 9660           adiw YH:YL, 16            ; else set ptr to dsp buff 2.
                         
                 get_msg_byte:
00014f 9105           lpm R16, Z+               ; get next byte of msg and see if '0'.        
000150 3000           cpi R16, 0                ; if equal to '0', end of message reached.
000151 f011           breq msg_loaded           ; jump and stop message loading operation.
000152 9309           st Y+, R16                ; else, store next byte of msg in buffer.
000153 cffb           rjmp get_msg_byte         ; jump back and continue...
                 msg_loaded:
000154 9508           ret
                 
                 ;***************************************************************************
                 ;*
                 ;* "bin2BCD16" - 16-bit Binary to BCD conversion
                 ;*
                 ;* This subroutine converts a 16-bit number (fbinH:fbinL) to a 5-digit
                 ;* packed BCD number represented by 3 bytes (tBCD2:tBCD1:tBCD0).
                 ;* MSD of the 5-digit number is placed in the lowermost nibble of tBCD2.
                 ;*
                 ;* Number of words	:25
                 ;* Number of cycles	:751/768 (Min/Max)
                 ;* Low registers used	:3 (tBCD0,tBCD1,tBCD2)
                 ;* High registers used  :4(fbinL,fbinH,cnt16a,tmp16a)	
                 ;* Pointers used	:Z
                 ;*
                 ;***************************************************************************
                 
                 ;***** Subroutine Register Variables
                 
                 .equ	AtBCD0	=13			;address of tBCD0
                 .equ	AtBCD2	=15			;address of tBCD1
                 
                 .def	tBCD0	=r13		;BCD value digits 1 and 0
                 .def	tBCD1	=r14		;BCD value digits 3 and 2
                 .def	tBCD2	=r15		;BCD value digit 4
                 .def	fbinL	=r18		;binary value Low byte
                 .def	fbinH	=r19		;binary value High byte
                 .def	cnt16a	=r16		;loop counter
                 .def	tmp16a	=r17		;temporary value
                 
                 ;***** Code
                 
                 bin2BCD16:
000155 e100      	ldi	cnt16a,16	;Init loop counter	
000156 24ff      	clr	tBCD2		;clear result (3 bytes)
000157 24ee      	clr	tBCD1		
000158 24dd      	clr	tBCD0		
000159 27ff      	clr	ZH		;clear ZH (not needed for AT90Sxx0x)
00015a 0f22      bBCDx_1:lsl	fbinL		;shift input value
00015b 1f33      	rol	fbinH		;through all bytes
00015c 1cdd      	rol	tBCD0		;
00015d 1cee      	rol	tBCD1
00015e 1cff      	rol	tBCD2
00015f 950a      	dec	cnt16a		;decrement loop counter
000160 f409      	brne	bBCDx_2		;if counter not zero
000161 9508      	ret			;   return
                 
000162 e1e0      bBCDx_2:ldi	r30,AtBCD2+1	;Z points to result MSB + 1
                 bBCDx_3:
000163 9112      	ld	tmp16a,-Z	;get (Z) with pre-decrement
000164 5f1d      	subi	tmp16a,-$03	;add 0x03
000165 fd13      	sbrc	tmp16a,3	;if bit 3 not clear
000166 8310      	st	Z,tmp16a	;	store back
000167 8110      	ld	tmp16a,Z	;get (Z)
000168 5d10      	subi	tmp16a,-$30	;add 0x30
000169 fd17      	sbrc	tmp16a,7	;if bit 7 not clear
00016a 8310      	st	Z,tmp16a	;	store back
00016b 30ed      	cpi	ZL,AtBCD0	;done all three?
00016c f7b1      	brne	bBCDx_3		;loop again if not
00016d cfec      	rjmp	bBCDx_1		
                 
                 ;**************************************************************************
                 ;NAME:		unpack_bcd_to_ascii
                 ;FUNCTION:	unpacks bcd numbers and converts to ascii
                 ;ASSUMES:	r14:r13 are bcd values
                 ;RETURNS:	values stored in buffers
                 ;MODIFIES:	SRAM
                 ;CALLS:		ASCII_table
                 ;CALLED BY:	MAIN
                 ;**************************************************************************
                 
                 unpack_bcd_to_ascii:
00016e e00f      		ldi r16, $0F				;load and
00016f 2ea0      		mov r10, r16				;save masking value
000170 2c3e      		mov r3, r14					;copy BCD2&3
000171 9432      		swap r3						;SWAP BCD2&3
000172 203a      		and r3, r10					;save BCD3
000173 2db3      		mov r27, r3					;copy for table
000174 d016      		rcall ASCII_table			;jmp to table lookup
000175 9360 0064 		sts dsp_buff_1+4, r22		;store BCD3
000177 2c2e      		mov r2, r14					;copy BCD2&3
000178 202a      		and r2, r10					;keep BCD2
000179 2db2      		mov r27, r2					;copy for table
00017a d010      		rcall ASCII_table			;jmp to table lookup
00017b 9360 0066 		sts dsp_buff_1+6, r22		;store BCD2
00017d 2c1d      		mov r1, r13					;copy BCD1&0
00017e 9412      		swap r1						;swap BCD1&0
00017f 201a      		and r1, r10					;save BCD1
000180 2db1      		mov r27, r1					;copy for table
000181 d009      		rcall ASCII_table			;jmp to table lookup
000182 9360 0067 		sts dsp_buff_1+7, r22		;store BCD1
000184 2c0d      		mov r0, r13					;copy BCD1&0
000185 200a      		and r0, r10					;save BCD0
000186 2db0      		mov r27, r0					;copy for table
000187 d003      		rcall ASCII_table			;jmp to table lookup
000188 9360 0068 		sts dsp_buff_1+8, r22		;store BCD0
00018a 9508      		ret							;return
                 
                 ;**************************************************************************
                 ;ASCII_table- self-contained subroutine that takes a HEX value
                 ;and points to its associated ASCII value
                 ;modification of BCD lookup table
                 ;
                 ;inputs: Z-pointer
                 ;			-ZH is high Z
                 ;			-ZL is low Z
                 ;		 r16 is a place holder for adc
                 ;		 r27 is the HEX value to be converted
                 ;outputs: result of Z point are loaded into r22
                 ;		  returned to be stored in SRAM
                 ;***************************************************************************
                 
                 ASCII_table:
00018b e0f3      		ldi ZH, high (table * 2)	;set Z to point to start of table
00018c e2e4      		ldi ZL, low (table * 2)		;
00018d e000      		ldi r16, $00				;clear for add w/ carry
00018e 0feb      		add ZL, r27					;add low byte
00018f 1ff0      		adc ZH, r16					;add in the CY
000190 9164      		lpm r22, Z					;load bit pattern from table into r22
000191 9508      		ret
                 
000192 3130
000193 3332
000194 3534
000195 3736
000196 3938      table: .db $30,$31,$32,$33,$34,$35,$36,$37,$38,$39
                 		   ;0,  1,  2,  3,  4,  5,  6,  7,  8,	9
                 
                 ;**************************************************************************
                 ;NAME:		delay
                 ;FUNCTION:	creates a variable delay
                 ;ASSUMES:	nothing
                 ;RETURNS:	nothing
                 ;MODIFIES:	r16, r17
                 ;CALLS:		nothing
                 ;CALLED BY:	adc_read
                 ;**************************************************************************
                 delay:
000197 ef0f      		ldi r16, $FF		;outer 10ms delay loop
                 delay1:
000198 ef1f      		ldi r17, $FF		;inner loop counter
                 here:
000199 951a      		dec r17				;decrement the inner loop
00019a 0000      		nop	
00019b 0000      		nop					;delay
00019c f7e1      		brne here			;if r17 isnt zero, inner loop repeat
00019d 950a      		dec r16				;decrement the outer loop
00019e 0000      		nop					;delay
00019f f7c1      		brne delay1		;if r16 isnt zero, outer loop repeat
0001a0 0000      		nop					;delay
0001a1 0000      		nop					;delay
0001a2 9508      		ret
                 
                 ;*********************************************************************
                 ;NAME:      tone_5V
                 ;FUNCTION:  causes tone/beep on piezo element
                 ;ASSUMES:   nothing
                 ;RETURNS:   nothing
                 ;MODIFIES:  SREG
                 ;CALLS:     v_delay
                 ;*********************************************************************
                 tone_5V:
0001a3 937f            push  r23   ; save registers
0001a4 936f            push  r22
0001a5 930f            push  r16
                 
                    ;***************************************************
                    ;SOUNDER TONE/DURATION - ADJUSTABLE VALUE
                    ;(May be adjusted by user, as needed)
0001a6 e00c          ldi   r16, 12     ; CALIBRATION PARAMETER
                    ;SOUNDER TONE/DURATION ADJUSTMENT
                    ;***************************************************
0001a7 e064            ldi  r22, 0x04  ; inner delay count.
0001a8 e071            ldi  r23, 1     ; outer delay count.
                 tone_loop:
0001a9 936f            push r22        ; save counts in r22 and r23
0001aa 937f            push r23        ;
0001ab 98a8            cbi  PortC,0    ; turn on sounder
0001ac de5c            rcall v_delay   ; delay
0001ad 9aa8            sbi  PortC,0    ; turn off sounder
0001ae 917f            pop r23         ; restore delay count
0001af 916f            pop r22         ; down registers
0001b0 950a            dec r16         ; adjust loop ctr, and if not
0001b1 f7b9            brne tone_loop  ; zero, then branch and repeat.
                 
0001b2 910f            pop  r16   ; restore registers
0001b3 916f            pop  r22
0001b4 917f            pop  r23
0001b5 9508            ret
                 
                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16A" register use summary:
r0 :   3 r1 :   4 r2 :   3 r3 :   4 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   5 r11:   0 r12:   0 r13:   4 r14:   4 r15:   2 
r16:  90 r17:  24 r18:   7 r19:   7 r20:   8 r21:   0 r22:  12 r23:   7 
r24:   8 r25:  10 r26:   2 r27:   5 r28:   3 r29:   3 r30:  13 r31:  12 
x  :   0 y  :   1 z  :  11 
Registers used: 25 out of 35 (71.4%)

"ATmega16A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   1 adiw  :   2 and   :   4 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   1 break :   0 breq  :   4 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  25 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :  10 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   4 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   8 cpse  :   0 dec   :  21 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  14 inc   :   0 jmp   :   0 
ld    :   5 ldd   :   0 ldi   :  71 lds   :   0 lpm   :   4 lsl   :   1 
lsr   :   0 mov   :   9 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   9 or    :   0 ori   :   0 out   :  15 pop   :  20 
push  :  20 rcall :  66 ret   :  24 reti  :   0 rjmp  :  13 rol   :   6 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  12 sbic  :   2 sbis  :   4 
sbiw  :   0 sbr   :   0 sbrc  :   2 sbrs  :   2 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   4 std   :   0 sts   :   4 
sub   :   0 subi  :   2 swap  :   2 tst   :   0 wdr   :   0 
Instructions used: 35 out of 113 (31.0%)

"ATmega16A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00036c    794     82    876   16384   5.3%
[.dseg] 0x000060 0x000090      0     48     48    1024   4.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
